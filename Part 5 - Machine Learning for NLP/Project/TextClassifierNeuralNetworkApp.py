import tkinter as tk
from sklearn.feature_extraction.text import TfidfVectorizer
import numpy as np
from keras.models import load_model
import joblib
import pandas as pd

# Load the pre-trained model (without optimizer)
model = load_model('/Users/gonzalovaldenebro/Library/CloudStorage/OneDrive-DrakeUniversity/CS 195/Fortnight 5/NeuralNetwork.keras', compile=False)

# Load the TF-IDF vectorizer (you need to save it separately when training the model)
vectorizer = joblib.load('/Users/gonzalovaldenebro/Library/CloudStorage/OneDrive-DrakeUniversity/CS 195/Fortnight 5/vectorizer.pkl')

# Function to predict text
def predict_text():
    input_text = input_entry.get()
    new_text = [input_text]
    new_text_vectors = vectorizer.transform(new_text)
    new_text_vectors_array = new_text_vectors.toarray()

    predictions = model.predict(new_text_vectors_array, verbose=0)

    category_mapping = {0: 'World', 1: 'Sports', 2: 'Business', 3: 'Sci/Tech'}
    predicted_labels = predictions.argmax(axis=1)
    predicted_category = category_mapping.get(predicted_labels[0], 'Unknown')

    prediction_percentages = [f"{prob * 100:.3f}%" for prob in predictions[0]]

    result_label.config(text=f"Predicted category: {predicted_category} ({prediction_percentages[0]})")

    # Create a DataFrame-like display for other categories and their prediction percentages
    category_labels = [category_mapping[i] for i in range(len(category_mapping))]
    category_labels.remove(predicted_category)
    other_predictions = [(label, f"{prob * 100:.3f}%") for label, prob in zip(category_labels, predictions[0])]
    other_predictions_sorted = sorted(other_predictions, key=lambda x: float(x[1][:-1]), reverse=True)

    other_predictions_text = "\n".join([f"{label}: {percentage}" for label, percentage in other_predictions_sorted])
    other_predictions_label.config(text=f"Other Categories :\n{other_predictions_text}")

# Create the main application window
app = tk.Tk()
app.title("Text Classification App")

# Create input field and predict button
input_entry = tk.Entry(app, width=70)  # Adjust the width here
predict_button = tk.Button(app, text="Predict", command=predict_text)
result_label = tk.Label(app, text="Predicted category will appear here", wraplength=400)
other_predictions_label = tk.Label(app, text="Other Categories will appear here", wraplength=400)

# Pack widgets
input_entry.pack(padx=10, pady=10)
predict_button.pack(padx=10, pady=10)
result_label.pack(padx=10, pady=10)
other_predictions_label.pack(padx=10, pady=10)

app.mainloop()








































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































